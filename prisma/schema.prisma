generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  username          String          @unique @db.VarChar(20)
  email             String          @unique @db.VarChar(150)
  phone             String?         @unique @db.VarChar(20)
  password          String
  role              String          @db.VarChar(20)
  is_verified       Boolean?        @default(false)
  is_active         Boolean?        @default(true)
  profile_image_url String?         @default("")
  last_login_at     DateTime?       @db.Timestamp(6)
  updated_at        DateTime?       @default(now()) @updatedAt @db.Timestamp(6)
  created_at        DateTime?       @default(now()) @db.Timestamp(6)
  verification      Int?
  teachings         CourseTeacher[]
  enrollments       Enrollment[]
}

model Teacher {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  bio         String?
  image_url   String?
  phone       String?   @unique @db.VarChar(20)
  professions String[]  @default([])
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  courses     Course[]
}

model Course {
  id          Int             @id @default(autoincrement())
  title       String          @db.VarChar(200)
  description String?
  price       String
  duration    String
  teacherId   Int             @map("teacher_id")
  is_active   Boolean?        @default(true)
  created_at  DateTime?       @default(now()) @db.Timestamp(6)
  teacher     Teacher         @relation(fields: [teacherId], references: [id], onUpdate: NoAction)
  teachers    CourseTeacher[]
  enrollments Enrollment[]
}

model CourseTeacher {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  courseId    Int       @map("course_id")
  assigned_at DateTime? @default(now()) @map("assigned_at") @db.Timestamp(6)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, courseId])
  @@map("CourseTeacher")
}

model Enrollment {
  id          Int         @id @default(autoincrement())
  userId      Int         @map("user_id")
  courseId    Int         @map("course_id")
  enrolled_at DateTime?   @default(now()) @map("enrolled_at") @db.Timestamp(6)
  Attendance  Attendance?
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, courseId])
  @@map("Enrollment")
}

model Attendance {
  id            Int        @id @default(autoincrement())
  enrollment_id Int        @unique
  checklist     Int[]      @default([]) @db.SmallInt
  last_updated  DateTime?  @default(now()) @updatedAt @db.Timestamp(6)
  Enrollment    Enrollment @relation(fields: [enrollment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ProductCategory {
  product_id  Int
  category_id Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
  @@map("ProductCategory")
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @db.VarChar(100)
  products ProductCategory[]
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String            @unique @db.VarChar(200)
  description String?
  price       String
  stock       Int               @default(0)
  image_url   String?           @default("")
  created_at  DateTime?         @default(now()) @db.Timestamp(6)
  discount    Discount[]
  categories  ProductCategory[]
}

model Discount {
  id               Int       @id @default(autoincrement())
  product_id       Int
  discount_percent Int
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  product          Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
